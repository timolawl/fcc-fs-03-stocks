{"version":3,"sources":["../../../node_modules/browser-pack/_prelude.js","post.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","createChart","seriesOptions","Highcharts","stockChart","document","querySelector","rangeSelector","selected","yAxis","labels","formatter","this","value","plotLines","width","color","plotOptions","series","compare","showInNavigator","tooltip","pointFormat","valueDecimals","split","socket","io","jQuery","ajaxPrefilter","options","crossDomain","support","cors","url","window","onload","emit","addEventListener","preventDefault","ticker","toUpperCase","on","data","console","log","stockTickers","seriesCounter","names","to","Date","from","setMonth","getMonth","urlFromSegment","getUTCMonth","getUTCDate","getUTCFullYear","urlToSegment","historicalURLs","map","stockTicker","nameURLs","forEach","name","index","$","get","relevantData","row","items","parse","parseFloat","toFixed","slice"],"mappings":"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","file":"post.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// socket io -- the cdnjs script is in the HTML template above this script file\nvar socket = io();\n\n// https://www.npmjs.com/package/cors-anywhere\njQuery.ajaxPrefilter(function(options) {\n    if (options.crossDomain && jQuery.support.cors) {\n        options.url = 'https://cors-anywhere.herokuapp.com/' + options.url;\n    }\n});\n\nwindow.onload = function () {\n\n  socket.emit('request tickers', {});\n\n  // add stock\n  document.querySelector('.submit-btn').addEventListener('click', e => {\n    e.preventDefault();\n    if (document.querySelector('.stock-ticker').value) { \n      // may want to sanitize this before passing it along\n      socket.emit('add ticker', { ticker: document.querySelector('.stock-ticker').value.toUpperCase() }); \n    }\n  });\n  \n  // remove stock\n  document.querySelector('.delete-btn').addEventListener('click', e => {\n    e.preventDefault();\n    if (document.querySelector('.delete-stock-ticker').value) {\n      socket.emit('remove ticker', { ticker: document.querySelector('.delete-stock-ticker').value.toUpperCase() });\n    }\n  });\n\n  // load current stocks and have it painted in highstocks/highchart\n  // have this triggered on first load to load the first painting of highcharts\n  // and for subsequent paintings, just retrigger this socket event with updated data\n  socket.on('repaint', function (data) {\n    // given the stock ticker data\n    console.log('Logging data: ' + data.stockTickers);\n\n    // following the highcharts example:\n    let seriesOptions = [],\n        seriesCounter = 0,\n        names = data.stockTickers;\n\n    let to = new Date();\n    let from = new Date(to);\n  \n    from.setMonth(to.getMonth() - 12);\n\n    let urlFromSegment = `&a=${from.getUTCMonth()}&b=${from.getUTCDate()}&c=${from.getUTCFullYear()}`;\n    let urlToSegment = `&a=${to.getUTCMonth()}&b=${to.getUTCDate()}&c=${to.getUTCFullYear()}`;\n\n    let historicalURLs = names.map(stockTicker =>\n      `http://real-chart.finance.yahoo.com/table.csv?s=${stockTicker}${urlFromSegment}${urlToSegment}`);\n\n    let nameURLs = names.map(stockTicker => \n      `http://finance.yahoo.com/d/quotes.csv?s=${stockTicker}&f=n`);\n\n    console.log(historicalURLs);\n    console.log(nameURLs);\n\n    //retrieveData(historicalURLs, nameURLs);\n    \n    names.forEach((name, index) => {\n      // retrieve data first \n      $.get(historicalURLs[index], function (data) {\n        let relevantData = data.split(/\\r\\n|\\n/).map(row => {\n          let items = row.split(',');\n          return [Date.parse(items[0]), parseFloat((+items[4]).toFixed(2))]; // date and stock closing value\n        });\n\n        relevantData = relevantData.slice(1); // shave the title bar\n\n        seriesOptions[index] = {\n          name: name,\n          data: relevantData\n        };\n\n        console.log(relevantData);\n\n        seriesCounter += 1;\n\n        if (seriesCounter === names.length) {\n            createChart(seriesOptions);\n        }\n      });\n    });\n\n    \n   \n  });\n\n\n  // load new stocks\n  socket.on('load stock', function (data) {\n    // check to see if the stock is already listed\n  });\n\n};\n\n// http://www.highcharts.com/stock/demo/compare\nfunction createChart (seriesOptions) {\n  Highcharts.stockChart(document.querySelector('.chart'), {\n    rangeSelector: {\n      selected: 4\n    },\n    yAxis: {\n      labels: {\n        formatter: function () {\n          return (this.value > 0 ? ' + ' : '') + this.value + '%';\n        }\n      },\n      plotLines: [{\n        value: 0,\n        width: 2,\n        color: 'silver'\n      }]\n    },\n\n    plotOptions: {\n      series: {\n        compare: 'percent',\n        showInNavigator: true\n      }\n    },\n\n    tooltip: {\n      pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',\n      valueDecimals: 2,\n      split: true\n    },\n    series: seriesOptions\n  });\n}\n"]}
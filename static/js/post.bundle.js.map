{"version":3,"sources":["../../../node_modules/browser-pack/_prelude.js","post.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","createChart","seriesOptions","Highcharts","stockChart","document","querySelector","rangeSelector","selected","yAxis","labels","formatter","this","value","plotLines","width","color","plotOptions","series","compare","showInNavigator","tooltip","pointFormat","valueDecimals","split","checkLastUpdate","date","sameDate","lastUpdated","Date","now","getUTCDate","getUTCMonth","getUTCFullYear","generateStockUIElement","stockName","companyName","index","fragment","createDocumentFragment","highchartColors","getOptions","colors","stockWrapper","createElement","className","newRow","classList","add","appendChild","stock","style","border","setAttribute","ticker","textContent","company","remove","srClose","close","innerHTML","addEventListener","socket","emit","target","parentNode","removeChild","lastChild","io","jQuery","ajaxPrefilter","options","crossDomain","support","cors","url","window","onload","on","data","display","preventDefault","inputAdd","test","toUpperCase","stocksNode","firstChild","seriesCounter","names","stockTickers","to","from","setMonth","getMonth","urlFromSegment","urlToSegment","historicalURLs","map","stockTicker","nameURLs","toLowerCase","promises","name","sessionStorage","getItem","JSON","parse","today","sessionData","days","promise1","$","get","then","ResultSet","Result","promise2","sort","row","items","parseFloat","toFixed","filter","Promise","all","setItem","stringify","sessionStoredStock"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,QAAAU,OAAAJ,SCAA,YA2LA,SAASK,aAAaC,eACpBC,WAAWC,WAAWC,SAASC,cAAc,WAC3CC,eACEC,SAAU,GAEZC,OACEC,QACEC,UAAW,WACT,OAAQC,KAAKC,MAAQ,EAAI,MAAQ,IAAMD,KAAKC,MAAQ,MAGxDC,YACED,MAAO,EACPE,MAAO,EACPC,MAAO,YAIXC,aACEC,QACEC,QAAS,UACTC,iBAAiB,IAIrBC,SACEC,YAAa,mGACbC,cAAe,EACfC,OAAO,GAETN,OAAQhB,gBAIZ,QAASuB,iBAAiBC,MACxB,GAAIC,WAAW,EACXC,YAAc,GAAIC,MAAKH,MACvBI,IAAM,GAAID,KAId,OAHID,aAAYG,eAAiBD,IAAIC,cAAgBH,YAAYI,gBAAkBF,IAAIE,eAAiBJ,YAAYK,mBAAqBH,IAAIG,mBAC3IN,UAAW,GAENA,SAGT,QAASO,wBAAwBC,UAAWC,YAAaC,OAEvD,GAAIC,UAAWjC,SAASkC,yBAEpBC,gBAAkBrC,WAAWsC,aAAaC,OAG1CC,aAAetC,SAASuC,cAAc,MAI1C,IAHAD,aAAaE,UAAY,0CAGrBR,MAAQ,GAAM,EAAG,CACnB,GAAIS,QAASzC,SAASuC,cAAc,MACpCE,QAAOC,UAAUC,IAAI,OACrBF,OAAOC,UAAUC,IAAI,OAASX,OAC9BC,SAASW,YAAYH,QACrBA,OAAOG,YAAYN,kBAGnBL,UAASW,YAAYN,aAGvB,IAAIO,OAAQ7C,SAASuC,cAAc,MACnCM,OAAML,UAAY,QAClBK,MAAMC,MAAMC,OAAS,aAAeZ,gBAAgBH,OACpDa,MAAMG,aAAa,oBAAqBb,gBAAgBH,QACxDM,aAAaM,YAAYC,MACzB,IAAII,QAASjD,SAASuC,cAAc,MACpCU,QAAOP,UAAUC,IAAI,iBACrBM,OAAOC,YAAcpB,UACrBe,MAAMD,YAAYK,OAClB,IAAIE,SAAUnD,SAASuC,cAAc,MACrCY,SAAQT,UAAUC,IAAI,uBACtBQ,QAAQD,YAAcnB,YACtBc,MAAMD,YAAYO,QAElB,IAAIC,QAASpD,SAASuC,cAAc,SACpCa,QAAOZ,UAAY,oCACnBY,OAAOJ,aAAa,OAAQ,UAC5BH,MAAMD,YAAYQ,OAClB,IAAIC,SAAUrD,SAASuC,cAAc,OACrCc,SAAQX,UAAUC,IAAI,eACtBU,QAAQH,YAAc,QACtBE,OAAOR,YAAYS,QACnB,IAAIC,OAAQtD,SAASuC,cAAc,OACnCe,OAAMZ,UAAUC,IAAI,uBACpBW,MAAMN,aAAa,cAAe,QAClCM,MAAMC,UAAY,UAClBH,OAAOR,YAAYU,OAEnBF,OAAOI,iBAAiB,QAAS,SAAA/E,GAC/BgF,OAAOC,KAAK,iBAAmBT,OAAQnB,YACvCrD,EAAEkF,OAAOC,WAAWA,WAAWC,YAAYpF,EAAEkF,OAAOC,cAIlD5B,MAAQ,GAAM,EAChBhC,SAASC,cAAc,WAAW2C,YAAYX,UAG9CjC,SAASC,cAAc,WAAW6D,UAAUlB,YAAYX,UAhS5D,GAAIwB,QAASM,IAGbC,QAAOC,cAAc,SAASC,SACtBA,QAAQC,aAAeH,OAAOI,QAAQC,OACtCH,QAAQI,IAAM,uCAAyCJ,QAAQI,OAIvEC,OAAOC,OAAS,WAEdf,OAAOgB,GAAG,gBAAiB,SAAUC,MAC/BA,KAAKC,QACP3E,SAASC,cAAc,kBAAkByC,UAAUU,OAAO,oBAEvDpD,SAASC,cAAc,kBAAkByC,UAAUC,IAAI,sBAI9Dc,OAAOC,KAAK,sBAIZD,OAAOgB,GAAG,mBAAoB,SAAUC,MACtCjB,OAAOC,KAAK,wBAId1D,SAASC,cAAc,gBAAgBuD,iBAAiB,QAAS,SAAA/E,GAC/DA,EAAEmG,gBAEF,IAAIC,UAAW7E,SAASC,cAAc,qBAAqBO,KAEvDqE,WAAY,6BAA6BC,KAAKD,WAEhDpB,OAAOC,KAAK,cAAgBT,OAAQjD,SAASC,cAAc,qBAAqBO,MAAMuE,gBAEtF/E,SAASC,cAAc,qBAAqBO,MAAQ,IAIpDR,SAASC,cAAc,kBAAkByC,UAAUU,OAAO,sBAK9DpD,SAASC,cAAc,gBAAgBuD,iBAAiB,QAAS,SAAA/E,GAC/DA,EAAEmG,iBACgB5E,SAASC,cAAc,wBAAwBO,OAC9C,6BAA6BsE,KAAKD,WACnDpB,OAAOC,KAAK,iBAAmBT,OAAQjD,SAASC,cAAc,wBAAwBO,MAAMuE,gBAE5F/E,SAASC,cAAc,wBAAwBO,MAAQ,IAIvDR,SAASC,cAAc,kBAAkByC,UAAUU,OAAO,sBAO9DK,OAAOgB,GAAG,UAAW,SAAUC,MAI7B,IADA,GAAIM,YAAahF,SAASC,cAAc,WAClC+E,WAAWC,YACfD,WAAWnB,YAAYmB,WAAWC,WASpC,IAAIpF,kBACAqF,cAAgB,EAChBC,MAAQT,KAAKU,aAEbC,GAAK,GAAI7D,MACT8D,KAAO,GAAI9D,MAAK6D,GAEpBC,MAAKC,SAASF,GAAGG,WAAa,GAE9B,IAAIC,gBAAA,MAAuBH,KAAK3D,cAA5B,MAA+C2D,KAAK5D,aAApD,MAAsE4D,KAAK1D,iBAC3E8D,aAAA,MAAqBL,GAAG1D,cAAxB,MAA2C0D,GAAG3D,aAA9C,MAAgE2D,GAAGzD,iBAEnE+D,eAAiBR,MAAMS,IAAI,SAAAC,aAAA,MAAA,mDACsBA,YAAcJ,eAAiBC,eAKhFI,SAAWX,MAAMS,IAAI,SAAAC,aAAA,MAAA,8CACuBA,YAAYE,cADnC,sBAGrBC,SAAWb,MAAMS,IAAI,SAACK,KAAMjE,OAK5B,IAAIkE,eAAeC,QAAQF,QAAS7E,gBAAiBgF,KAAKC,MAAMH,eAAeC,QAAQF,OAAQ1E,aAiB1F,CACH,GAAIQ,aAAc,GACduE,MAAQ,GAAI9E,MACZ+E,YAAA,OAAaC,KAAA,OAGbC,SAAWC,EAAEC,IAAIb,SAAS9D,QAC7B4E,KAAK,SAAClC,MACL3C,YAAc2C,KAAKmC,UAAUC,OAAO,GAAGb,OAKrCc,SAEFL,EAAEC,IAAIhB,eAAe3D,QAClB4E,KAAK,SAAClC,MAOP8B,KANmB9B,KAAKvD,MAAM,WAAW6F,OAAOpB,IAAI,SAAAqB,KAClD,GAAIC,OAAQD,IAAI9F,MAAM,IAEtB,QAAQK,KAAK6E,MAAMa,MAAM,IAAKC,aAAaD,MAAM,IAAIE,QAAQ,OAG3CC,OAAO,SAACJ,IAAK/H,GAC/B,MAAO+H,KAAI,IAAY,IAAN/H,KAIvB,OAAOoI,SAAQC,KAAKd,SAAUM,WAC3BH,KAAK,WAGJL,aAAgB1D,MAAOoD,KAAM9C,QAASpB,YAAa2C,KAAM8B,KAAMjF,YAAa+E,OAC5EJ,eAAesB,QAAQvB,KAAMG,KAAKqB,UAAUlB,cAE5C1G,cAAcmC,QACZiE,KAAMA,KACNvB,KAAM8B,OAGRtB,eAAiB,KAEKC,MAAM1F,QAExBG,YAAYC,iBA5DpB,GAAI6H,oBAAqBtB,KAAKC,MAAMH,eAAeC,QAAQF,MAC3DpG,eAAcmC,QACZiE,KAAMA,KACNvB,KAAMgD,mBAAmBhD,OAE3BQ,eAAiB,KAIKC,MAAM1F,QAE1BG,YAAYC,gBAuDpByH,SAAQC,IAAIvB,UACTY,KAAK,WACJ,IAAK,GAAI1H,GAAI,EAAGA,EAAIiG,MAAM1F,OAAQP,IAAK,CACrC,GAAIiE,SAAUiD,KAAKC,MAAMH,eAAeC,QAAQhB,MAAMjG,IACtD2C,wBAAuBsD,MAAMjG,GAAIiE,QAAQA,QAASjE","file":"post.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// socket io -- the cdnjs script is in the HTML template above this script file\nvar socket = io();\n\n// https://www.npmjs.com/package/cors-anywhere\njQuery.ajaxPrefilter(function(options) {\n    if (options.crossDomain && jQuery.support.cors) {\n        options.url = 'https://cors-anywhere.herokuapp.com/' + options.url;\n    }\n});\n\nwindow.onload = function () {\n\n  socket.on('error message', function (data) {\n    if (data.display) {\n      document.querySelector('.error-message').classList.remove('visibility--hide');\n    }\n    else document.querySelector('.error-message').classList.add('visibility--hide');\n  });\n\n  // initialize chart here\n  socket.emit('request tickers', {});\n  \n\n  // any update to the trackers will trigger a repaint\n  socket.on('update processed', function (data) {\n    socket.emit('request tickers', {});\n  });\n\n  // add stock\n  document.querySelector('.btn--submit').addEventListener('click', e => {\n    e.preventDefault(); // this is why the form submission goes through anyway even with the pattern field\n    // client side limiting of string length:\n    let inputAdd = document.querySelector('.form__input--add').value;\n\n    if (inputAdd && /^[A-Za-z][A-Za-z\\.:]{0,9}$/.test(inputAdd)) { // limit string length\n      // may want to sanitize this before passing it along\n      socket.emit('add ticker', { ticker: document.querySelector('.form__input--add').value.toUpperCase() });\n      // clear the input field\n      document.querySelector('.form__input--add').value = '';\n    }\n    else {\n      // show error message\n      document.querySelector('.error-message').classList.remove('visibility--hide');\n    }\n  });\n  \n  // remove stock\n  document.querySelector('.btn--remove').addEventListener('click', e => {\n    e.preventDefault();\n    let inputRemove = document.querySelector('.form__input--remove').value;\n    if (inputRemove && /^[A-Za-z][A-Za-z\\.:]{0,9}$/.test(inputAdd)) {\n      socket.emit('remove ticker', { ticker: document.querySelector('.form__input--remove').value.toUpperCase() });\n      // clear the input field\n      document.querySelector('.form__input--remove').value = '';\n    }\n    else {\n      // show error message\n      document.querySelector('.error-message').classList.remove('visibility--hide');\n    }\n  });\n\n  // load current stocks and have it painted in highstocks/highchart\n  // have this triggered on first load to load the first painting of highcharts\n  // and for subsequent paintings, just retrigger this socket event with updated data\n  socket.on('repaint', function (data) {\n\n    // remove all old elements:\n    let stocksNode = document.querySelector('.stocks');\n    while(stocksNode.firstChild) {\n      stocksNode.removeChild(stocksNode.firstChild);\n    }\n\n    // seems horribly inefficient to redo all the AJAX calls, redraws/repaints after each addition/subtraction of a stock ticker, but this seems the price to pay for not saving the stock data beyond the name to the db.\n    // it is possible to use local storage to save the previous data and retrieve it there instead of making repeated AJAX calls\n    \n    // storing retrieved data in session storage:\n\n    // following the highcharts example:\n    let seriesOptions = [],\n        seriesCounter = 0,\n        names = data.stockTickers;\n\n    let to = new Date();\n    let from = new Date(to);\n  \n    from.setMonth(to.getMonth() - 12);\n\n    let urlFromSegment = `&a=${from.getUTCMonth()}&b=${from.getUTCDate()}&c=${from.getUTCFullYear()}`;\n    let urlToSegment = `&a=${to.getUTCMonth()}&b=${to.getUTCDate()}&c=${to.getUTCFullYear()}`;\n\n    let historicalURLs = names.map(stockTicker =>\n      `http://real-chart.finance.yahoo.com/table.csv?s=${stockTicker}${urlFromSegment}${urlToSegment}`);\n\n\n  //    let companyNameURL = 'http://autoc.finance.yahoo.com/autoc?query=mcd&region=1&lang=en';\n\n    let nameURLs = names.map(stockTicker => \n      `http://autoc.finance.yahoo.com/autoc?query=${stockTicker.toLowerCase()}&region=1&lang=en`);\n\n    let promises = names.map((name, index) => {\n    // need the sequential for loop as the generation of the stock UI elements need to be in order for the rows to generate properly\n   // for (let i = 0; i < names.length; i++) {\n      // check if these items are in session storage, and if the dates match.\n      // if so, retrieve from session storage:\n        if (sessionStorage.getItem(name) && checkLastUpdate((JSON.parse(sessionStorage.getItem(name))).lastUpdated)) {\n          let sessionStoredStock = JSON.parse(sessionStorage.getItem(name));\n          seriesOptions[index] = {\n            name: name,\n            data: sessionStoredStock.data\n          };\n          seriesCounter += 1;\n\n      //    generateStockUIElement(name, sessionStoredStock.company, index);\n\n          if (seriesCounter === names.length) {\n            // actual repaint\n            createChart(seriesOptions);\n          }\n\n        }\n        // otherwise, ajax the data\n        else {\n          let companyName = '';\n          let today = new Date();\n          let sessionData, days;\n\n          // grab the full name of the company\n          let promise1 = $.get(nameURLs[index])\n          .then((data) => {\n            companyName = data.ResultSet.Result[0].name;\n          //  generateStockUIElement(name, companyName, index);\n          });\n\n\n          let promise2 = \n            // grab historical stock data of the company\n            $.get(historicalURLs[index])\n              .then((data) => {\n              let relevantData = data.split(/\\r\\n|\\n/).sort().map(row => {\n                let items = row.split(',');\n                // date and stock closing value\n                return [Date.parse(items[0]), parseFloat((+items[4]).toFixed(2))]; \n              });\n              \n              days = relevantData.filter((row, i) => {\n                return row[0] && i !== 0; // remove title rows and non-content rows\n              });\n            });\n\n          return Promise.all([promise1, promise2])\n            .then(() => {\n              // will also need to save the date too and if the time difference is less than a day,\n              // do not try to grab data again?\n              sessionData = { stock: name, company: companyName, data: days, lastUpdated: today };\n              sessionStorage.setItem(name, JSON.stringify(sessionData));\n\n              seriesOptions[index] = {\n                name: name,\n                data: days\n              };\n\n              seriesCounter += 1;\n\n              if (seriesCounter === names.length) {\n                  // actual repaint\n                  createChart(seriesOptions);\n                }\n            });\n        }\n    });\n\n    Promise.all(promises)\n      .then(() => {\n        for (let i = 0; i < names.length; i++) {\n          let company = JSON.parse(sessionStorage.getItem(names[i]));\n          generateStockUIElement(names[i], company.company, i);\n        }\n      });\n\n  });\n};\n\n\n\n// http://www.highcharts.com/stock/demo/compare\nfunction createChart (seriesOptions) {\n  Highcharts.stockChart(document.querySelector('.chart'), {\n    rangeSelector: {\n      selected: 4\n    },\n    yAxis: {\n      labels: {\n        formatter: function () {\n          return (this.value > 0 ? ' + ' : '') + this.value + '%';\n        }\n      },\n      plotLines: [{\n        value: 0,\n        width: 2,\n        color: 'silver'\n      }]\n    },\n\n    plotOptions: {\n      series: {\n        compare: 'percent',\n        showInNavigator: true\n      }\n    },\n\n    tooltip: {\n      pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',\n      valueDecimals: 2,\n      split: true\n    },\n    series: seriesOptions\n  });\n}\n\nfunction checkLastUpdate (date) {\n  let sameDate = false;\n  let lastUpdated = new Date(date);\n  let now = new Date();\n  if (lastUpdated.getUTCDate() === now.getUTCDate() && lastUpdated.getUTCMonth() === now.getUTCMonth() && lastUpdated.getUTCFullYear() === now.getUTCFullYear()) {\n    sameDate = true;\n  }\n  return sameDate;\n}\n\nfunction generateStockUIElement (stockName, companyName, index) {\n  // create document fragment\n  let fragment = document.createDocumentFragment();\n\n  let highchartColors = Highcharts.getOptions().colors;\n\n  // wrapper around a stock element\n  let stockWrapper = document.createElement('div');\n  stockWrapper.className = 'wrapper--stock medium-6 large-6 columns';\n\n  // if not an even number of elements, make a new row.\n  if (index % 2 === 0) {\n    let newRow = document.createElement('div');\n    newRow.classList.add('row');\n    newRow.classList.add('row-' + index);\n    fragment.appendChild(newRow);\n    newRow.appendChild(stockWrapper);\n  }\n  else {\n    fragment.appendChild(stockWrapper);\n  }\n\n  let stock = document.createElement('div');\n  stock.className = 'stock';\n  stock.style.border = '1px solid ' + highchartColors[index];\n  stock.setAttribute('data-border-color', highchartColors[index]);\n  stockWrapper.appendChild(stock);\n  let ticker = document.createElement('div');\n  ticker.classList.add('stock__ticker');\n  ticker.textContent = stockName;\n  stock.appendChild(ticker);\n  let company = document.createElement('div');\n  company.classList.add('stock__company-name');\n  company.textContent = companyName;\n  stock.appendChild(company);\n  \n  let remove = document.createElement('button');\n  remove.className = 'hollow button alert stock__remove';\n  remove.setAttribute('type', 'button');\n  stock.appendChild(remove);\n  let srClose = document.createElement('span');\n  srClose.classList.add('show-for-sr');\n  srClose.textContent = 'Close';\n  remove.appendChild(srClose);\n  let close = document.createElement('span');\n  close.classList.add('stock__remove--icon');\n  close.setAttribute('aria-hidden', 'true');\n  close.innerHTML = '&times;';\n  remove.appendChild(close);\n\n  remove.addEventListener('click', e => {\n    socket.emit('remove ticker', { ticker: stockName });\n    e.target.parentNode.parentNode.removeChild(e.target.parentNode);\n  });\n\n  // depending on whether a new row was made or not, append appropriately:\n  if (index % 2 === 0) {\n    document.querySelector('.stocks').appendChild(fragment);\n  }\n  else {\n    document.querySelector('.stocks').lastChild.appendChild(fragment);\n    \n  }\n\n\n}\n"]}
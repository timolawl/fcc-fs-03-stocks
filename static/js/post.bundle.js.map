{"version":3,"sources":["../../../node_modules/browser-pack/_prelude.js","post.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","createChart","seriesOptions","Highcharts","stockChart","rangeSelector","selected","yAxis","labels","formatter","this","value","plotLines","width","color","plotOptions","series","compare","showInNavigator","tooltip","pointFormat","valueDecimals","split","checkLastUpdate","date","sameDate","lastUpdated","Date","now","getUTCDate","getUTCMonth","getUTCFullYear","generateStockUIElement","stockName","companyName","index","highchartColors","getOptions","colors","console","log","stock","document","createElement","classList","add","style","background","querySelector","appendChild","ticker","textContent","company","remove","addEventListener","socket","emit","target","parentNode","removeChild","io","jQuery","ajaxPrefilter","options","crossDomain","support","cors","url","window","onload","on","data","preventDefault","toUpperCase","stocksNode","firstChild","stockTickers","seriesCounter","names","to","from","setMonth","getMonth","urlFromSegment","urlToSegment","historicalURLs","map","stockTicker","nameURLs","toLowerCase","forEach","name","sessionStorage","getItem","JSON","parse","sessionStoredStock","today","sessionData","$","get","done","ResultSet","Result","relevantData","sort","row","items","parseFloat","toFixed","days","filter","setItem","stringify"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,QAAAU,OAAAJ,SCAA,YA4LA,SAASK,aAAaC,eACpBC,WAAWC,WAAW,SACpBC,eACEC,SAAU,GAQZC,OACEC,QACEC,UAAW,WACT,OAAQC,KAAKC,MAAQ,EAAI,MAAQ,IAAMD,KAAKC,MAAQ,MAGxDC,YACED,MAAO,EACPE,MAAO,EACPC,MAAO,YAIXC,aACEC,QACEC,QAAS,UACTC,iBAAiB,IAIrBC,SACEC,YAAa,mGACbC,cAAe,EACfC,OAAO,GAETN,OAAQd,gBAMZ,QAASqB,iBAAiBC,MACxB,GAAIC,WAAW,EACXC,YAAc,GAAIC,MAAKH,MAEvBI,IAAM,GAAID,KAId,OAHID,aAAYG,eAAiBD,IAAIC,cAAgBH,YAAYI,gBAAkBF,IAAIE,eAAiBJ,YAAYK,mBAAqBH,IAAIG,mBAC3IN,UAAW,GAENA,SAGT,QAASO,wBAAwBC,UAAWC,YAAaC,OAEvD,GAAIC,iBAAkBjC,WAAWkC,aAAaC,MAC9CC,SAAQC,IAAIJ,iBACZG,QAAQC,IAAIL,OAEZI,QAAQC,IAAI,aAAeP,UAAY,KAAOG,gBAAgBD,OAE9D,IAAIM,OAAQC,SAASC,cAAc,MACnCF,OAAMG,UAAUC,IAAI,SACpBJ,MAAMK,MAAMC,WAAaX,gBAAgBD,OACzCO,SAASM,cAAc,WAAWC,YAAYR,MAC9C,IAAIS,QAASR,SAASC,cAAc,MACpCO,QAAON,UAAUC,IAAI,iBACrBK,OAAOC,YAAclB,UACrBQ,MAAMQ,YAAYC,OAClB,IAAIE,SAAUV,SAASC,cAAc,MACrCS,SAAQR,UAAUC,IAAI,uBACtBO,QAAQD,YAAcjB,YACtBO,MAAMQ,YAAYG,QAClB,IAAIC,QAASX,SAASC,cAAc,SACpCU,QAAOF,YAAc,IACrBV,MAAMQ,YAAYI,QAClBA,OAAOC,iBAAiB,QAAS,SAAAxE,GAC/ByE,OAAOC,KAAK,iBAAmBN,OAAQjB,YACvCnD,EAAE2E,OAAOC,WAAWA,WAAWC,YAAY7E,EAAE2E,OAAOC,cAvQxD,GAAIH,QAASK,IAGbC,QAAOC,cAAc,SAASC,SACtBA,QAAQC,aAAeH,OAAOI,QAAQC,OACtCH,QAAQI,IAAM,uCAAyCJ,QAAQI,OAIvEC,OAAOC,OAAS,WAGdd,OAAOC,KAAK,sBAIZD,OAAOe,GAAG,mBAAoB,SAAUC,MACtChB,OAAOC,KAAK,wBAIdd,SAASM,cAAc,eAAeM,iBAAiB,QAAS,SAAAxE,GAC9DA,EAAE0F,iBACE9B,SAASM,cAAc,iBAAiBrC,OAE1C4C,OAAOC,KAAK,cAAgBN,OAAQR,SAASM,cAAc,iBAAiBrC,MAAM8D,kBAKtF/B,SAASM,cAAc,eAAeM,iBAAiB,QAAS,SAAAxE,GAC9DA,EAAE0F,iBACE9B,SAASM,cAAc,wBAAwBrC,OACjD4C,OAAOC,KAAK,iBAAmBN,OAAQR,SAASM,cAAc,wBAAwBrC,MAAM8D,kBAOhGlB,OAAOe,GAAG,UAAW,SAAUC,MAI7B,IADA,GAAIG,YAAahC,SAASM,cAAc,WAClC0B,WAAWC,YACfD,WAAWf,YAAYe,WAAWC,WAKpCpC,SAAQC,IAAI,iBAAmB+B,KAAKK,aAMpC,IAAI1E,kBACA2E,cAAgB,EAChBC,MAAQP,KAAKK,aAEbG,GAAK,GAAIpD,MACTqD,KAAO,GAAIrD,MAAKoD,GAEpBC,MAAKC,SAASF,GAAGG,WAAa,GAE9B,IAAIC,gBAAA,MAAuBH,KAAKlD,cAA5B,MAA+CkD,KAAKnD,aAApD,MAAsEmD,KAAKjD,iBAC3EqD,aAAA,MAAqBL,GAAGjD,cAAxB,MAA2CiD,GAAGlD,aAA9C,MAAgEkD,GAAGhD,iBAEnEsD,eAAiBP,MAAMQ,IAAI,SAAAC,aAAA,MAAA,mDACsBA,YAAcJ,eAAiBC,eAKhFI,SAAWV,MAAMQ,IAAI,SAAAC,aAAA,MAAA,8CACuBA,YAAYE,cADnC,qBAGzBlD,SAAQC,IAAI6C,gBACZ9C,QAAQC,IAAIgD,UAIZV,MAAMY,QAAQ,SAACC,KAAMxD,OAGnB,GAAIyD,eAAeC,QAAQF,OAASpE,gBAAiBuE,KAAKC,MAAMH,eAAeC,QAAQF,OAAQjE,aAAc,CAC3Ga,QAAQC,IAAI,WAAamD,KAAO,wBAChC,IAAIK,oBAAqBF,KAAKC,MAAMH,eAAeC,QAAQF,MAC3DzF,eAAciC,QACZwD,KAAMA,KACNpB,KAAMyB,mBAAmBzB,MAE3BM,eAAiB,EAEjB7C,uBAAuB2D,KAAMK,mBAAmB9D,YAAaC,OAEzD0C,gBAAkBC,MAAMhF,QAE1BG,YAAYC,mBAKX,CACH,GAAIgC,aAAc,GACd+D,MAAQ,GAAItE,MACZuE,YAAA,MAKJC,GAAEC,IAAIZ,SAASrD,QACdkE,KAAK,SAAU9B,MAEdrC,YAAcqC,KAAK+B,UAAUC,OAAO,GAAGZ,KACvC3D,uBAAuB2D,KAAMzD,YAAaC,SAG3CkE,KAGCF,EAAEC,IAAIf,eAAelD,OAAQ,SAAUoC,MACrChC,QAAQC,IAAI,qBAAuBmD,KACnC,IAAIa,cAAejC,KAAKjD,MAAM,WAAWmF,OAAOnB,IAAI,SAAAoB,KAClD,GAAIC,OAAQD,IAAIpF,MAAM,IAEtB,QAAQK,KAAKoE,MAAMY,MAAM,IAAKC,aAAaD,MAAM,IAAIE,QAAQ,OAG3DC,KAAON,aAAaO,OAAO,SAACL,IAAKnH,GACnC,MAAOmH,KAAI,IAAY,IAANnH,GAMnB2G,cAAgBzD,MAAOkD,KAAMzD,YAAaA,YAAaqC,KAAMuC,KAAMpF,YAAauE,OAGhFL,eAAeoB,QAAQrB,KAAMG,KAAKmB,UAAUf,cAK5ChG,cAAciC,QACZwD,KAAMA,KACNpB,KAAMuC,OAGRjC,eAAiB,KAEKC,MAAMhF,QAExBG,YAAYC,uBAyB1BqD,OAAOe,GAAG,aAAc,SAAUC","file":"post.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// socket io -- the cdnjs script is in the HTML template above this script file\nvar socket = io();\n\n// https://www.npmjs.com/package/cors-anywhere\njQuery.ajaxPrefilter(function(options) {\n    if (options.crossDomain && jQuery.support.cors) {\n        options.url = 'https://cors-anywhere.herokuapp.com/' + options.url;\n    }\n});\n\nwindow.onload = function () {\n\n  // initialize chart here\n  socket.emit('request tickers', {});\n  \n\n  // any update to the trackers will trigger a repaint\n  socket.on('update processed', function (data) {\n    socket.emit('request tickers', {});\n  });\n\n  // add stock\n  document.querySelector('.submit-btn').addEventListener('click', e => {\n    e.preventDefault();\n    if (document.querySelector('.stock-ticker').value) { \n      // may want to sanitize this before passing it along\n      socket.emit('add ticker', { ticker: document.querySelector('.stock-ticker').value.toUpperCase() });\n    }\n  });\n  \n  // remove stock\n  document.querySelector('.delete-btn').addEventListener('click', e => {\n    e.preventDefault();\n    if (document.querySelector('.delete-stock-ticker').value) {\n      socket.emit('remove ticker', { ticker: document.querySelector('.delete-stock-ticker').value.toUpperCase() });\n    }\n  });\n\n  // load current stocks and have it painted in highstocks/highchart\n  // have this triggered on first load to load the first painting of highcharts\n  // and for subsequent paintings, just retrigger this socket event with updated data\n  socket.on('repaint', function (data) {\n\n    // remove all old elements:\n    let stocksNode = document.querySelector('.stocks');\n    while(stocksNode.firstChild) {\n      stocksNode.removeChild(stocksNode.firstChild);\n    }\n\n\n    // given the stock ticker data\n    console.log('Logging data: ' + data.stockTickers);\n\n    // seems horribly inefficient to redo all the AJAX calls, redraws/repaints after each addition/subtraction of a stock ticker, but this seems the price to pay for not saving the stock data beyond the name to the db.\n    // it is possible to use local storage to save the previous data and retrieve it there instead of making repeated AJAX calls\n\n    // following the highcharts example:\n    let seriesOptions = [],\n        seriesCounter = 0,\n        names = data.stockTickers;\n\n    let to = new Date();\n    let from = new Date(to);\n  \n    from.setMonth(to.getMonth() - 12);\n\n    let urlFromSegment = `&a=${from.getUTCMonth()}&b=${from.getUTCDate()}&c=${from.getUTCFullYear()}`;\n    let urlToSegment = `&a=${to.getUTCMonth()}&b=${to.getUTCDate()}&c=${to.getUTCFullYear()}`;\n\n    let historicalURLs = names.map(stockTicker =>\n      `http://real-chart.finance.yahoo.com/table.csv?s=${stockTicker}${urlFromSegment}${urlToSegment}`);\n\n\n  //    let companyNameURL = 'http://autoc.finance.yahoo.com/autoc?query=mcd&region=1&lang=en';\n\n    let nameURLs = names.map(stockTicker => \n      `http://autoc.finance.yahoo.com/autoc?query=${stockTicker.toLowerCase()}&region=1&lang=en`);\n\n    console.log(historicalURLs);\n    console.log(nameURLs);\n\n    //retrieveData(historicalURLs, nameURLs);\n    \n    names.forEach((name, index) => {\n      // check if these items are in session storage, and if the dates match.\n      // if so, retrieve from session storage:\n      if (sessionStorage.getItem(name) && checkLastUpdate((JSON.parse(sessionStorage.getItem(name))).lastUpdated)) {\n        console.log('loading ' + name + ' from session storage');\n        let sessionStoredStock = JSON.parse(sessionStorage.getItem(name));\n        seriesOptions[index] = {\n          name: name,\n          data: sessionStoredStock.data\n        };\n        seriesCounter += 1;\n\n        generateStockUIElement(name, sessionStoredStock.companyName, index);\n\n        if (seriesCounter === names.length) {\n          // actual repaint\n          createChart(seriesOptions);\n        }\n\n      }\n      // otherwise, ajax the data\n      else {\n        let companyName = '';\n        let today = new Date();\n        let sessionData;\n\n        \n\n        // grab the full name of the company\n        $.get(nameURLs[index])\n        .done(function (data) {\n         // console.log(data);\n          companyName = data.ResultSet.Result[0].name;\n          generateStockUIElement(name, companyName, index);\n        })\n\n        .done(\n\n          // grab historical stock data of the company\n          $.get(historicalURLs[index], function (data) {\n            console.log('ajax request for: ' + name);\n            let relevantData = data.split(/\\r\\n|\\n/).sort().map(row => {\n              let items = row.split(',');\n              // date and stock closing value\n              return [Date.parse(items[0]), parseFloat((+items[4]).toFixed(2))]; \n            });\n            \n            let days = relevantData.filter((row, i) => {\n              return row[0] && i !== 0; // remove title rows and non-content rows\n            });\n            \n\n            // will also need to save the date too and if the time difference is less than a day,\n            // do not try to grab data again?\n            sessionData = { stock: name, companyName: companyName, data: days, lastUpdated: today }\n         //   console.log(sessionData);\n\n            sessionStorage.setItem(name, JSON.stringify(sessionData));\n\n          //  let test = sessionStorage.getItem(name);\n          //  console.log(JSON.parse(test));\n\n            seriesOptions[index] = {\n              name: name,\n              data: days\n            };\n\n            seriesCounter += 1;\n\n            if (seriesCounter === names.length) {\n                // actual repaint\n                createChart(seriesOptions);\n              }\n          })\n        );\n      }\n\n      \n      \n\n\n      // if not, retrieve data first, process, then store in session storage\n      // overwriting any old stock ticker dates\n            \n      // check sessions storage if the name exists. If so, then retrieve the name there\n      \n      // else, retrieve the name from the name URL and save it to session storage\n\n    });\n\n    \n   \n  });\n\n\n  // load new stocks\n  socket.on('load stock', function (data) {\n    // check to see if the stock is already listed\n  });\n\n};\n\n// http://www.highcharts.com/stock/demo/compare\nfunction createChart (seriesOptions) {\n  Highcharts.stockChart('chart', {\n    rangeSelector: {\n      selected: 4\n    },\n    /*\n    xAxis: {\n      min: new Date('2000/10/22').getTime(),\n      max: new Date('2010/10/22').getTime(),\n    },\n    */\n    yAxis: {\n      labels: {\n        formatter: function () {\n          return (this.value > 0 ? ' + ' : '') + this.value + '%';\n        }\n      },\n      plotLines: [{\n        value: 0,\n        width: 2,\n        color: 'silver'\n      }]\n    },\n\n    plotOptions: {\n      series: {\n        compare: 'percent',\n        showInNavigator: true\n      }\n    },\n\n    tooltip: {\n      pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',\n      valueDecimals: 2,\n      split: true\n    },\n    series: seriesOptions\n  });\n\n//  console.log(Highcharts.getOptions().colors);\n}\n\nfunction checkLastUpdate (date) {\n  let sameDate = false;\n  let lastUpdated = new Date(date);\n // console.log(testDate.getUTCDate());\n  let now = new Date();\n  if (lastUpdated.getUTCDate() === now.getUTCDate() && lastUpdated.getUTCMonth() === now.getUTCMonth() && lastUpdated.getUTCFullYear() === now.getUTCFullYear()) {\n    sameDate = true;\n  }\n  return sameDate;\n}\n\nfunction generateStockUIElement (stockName, companyName, index) {\n\n  let highchartColors = Highcharts.getOptions().colors;\n  console.log(highchartColors);\n  console.log(index);\n\n  console.log('color for ' + stockName + ': ' + highchartColors[index]);\n  //let fragment = document.createDocumentFragment();\n  let stock = document.createElement('div');\n  stock.classList.add('stock');\n  stock.style.background = highchartColors[index];\n  document.querySelector('.stocks').appendChild(stock);\n  let ticker = document.createElement('div');\n  ticker.classList.add('stock__ticker');\n  ticker.textContent = stockName;\n  stock.appendChild(ticker);\n  let company = document.createElement('div');\n  company.classList.add('stock__company-name');\n  company.textContent = companyName;\n  stock.appendChild(company);\n  let remove = document.createElement('button');\n  remove.textContent = 'X';\n  stock.appendChild(remove);\n  remove.addEventListener('click', e => {\n    socket.emit('remove ticker', { ticker: stockName });\n    e.target.parentNode.parentNode.removeChild(e.target.parentNode);\n  });\n\n}\n"]}